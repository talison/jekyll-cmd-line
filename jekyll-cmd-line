#!/usr/bin/env python
# requires PyYAML: http://pyyaml.org/

from datetime import date
from optparse import OptionParser
from string import Template
from subprocess import Popen
import glob
import os.path
import re
import sys
import yaml

# jekyll-cmd -s <site> -p "My Cool Post"
# jekyll-cmd -s <site> -d "My Cool Draft"
# jekyll-cmd -s <site> -p "<draft keyword>" (publishes a draft)
# TODO: Category support

DRAFTS = "_drafts"
POSTS = "_posts"
CONFIG_FILE = ".jekyll"
EMPTY_LINE = re.compile(r'^\s*$', re.M)

# String templates
FRONT_MATTER = Template("""---
$title
$layout
$categories
---
""")

PROMPT = Template("""
Found matching drafts. Select a draft or hit ENTER to create a new post.

$matches

Draft number (or ENTER for new post): """)


parser = OptionParser(usage="usage: %prog options")
parser.add_option("-s", "--site", help="The site configuration to use")
parser.add_option("-d", "--draft", help="The title of the draft")
parser.add_option("-p", "--post", help="The title of the post")
parser.add_option("-c", "--config", help="Location of .jekyll file")

(options, args) = parser.parse_args()

def get_config():
    # Check for config on command line
    config = options.config
    if not(config):
        # Find config in home directory
        config = os.path.join(os.path.expanduser("~"), CONFIG_FILE)

    if not(os.path.exists(config)):
        exit("Jekyll config must be specified on command line or in your HOME directory")

    return yaml.load(file(config))

def exit(msg):
    print msg
    parser.print_help()
    sys.exit(2)

def check_args():
    if not(config.get('default_site') or options.site):
        exit("No default site found and none specified on command line.")

def get_site_config(site):
    """Gets the configuration for a particular site."""
    if site == None:
        site = config.get('default_site')

    sites = config.get('sites')

    if not(sites):
        exit("No sites found in Jekyll config file")

    # The user did not pass in a site on the command-line, and has no
    # default_site option. If they only have one site in the config
    # file, default to that.
    if not(site) and len(sites) == 1:
        return sites[0]

    for s in sites:
        if (s.get('name') == site):
            return s

    return None

def create_file_name(title, is_draft=False):
    """Creates a file name based on the title.

    Non-alphanumeric characters are replaced by a '-' to create the
    file name.
    """
    clean_title = re.sub(r"\W", "-", title).lower() + site.get('extension','')

    if is_draft:
        return clean_title

    return date.today().isoformat() + "-" + clean_title

def get_site_subdir(name, create=False):
    """Gets the directory that's a subdirectory of the current site.

    If the create param is true, the directory will be created if it
    doesn't exist.
    """
    subdir = os.path.expanduser(os.path.join(site.get('location'), name))
    if create and not(os.path.exists(subdir)):
        os.mkdir(subdir)

    return subdir

def write_front_matter(file_path, title):
    """Writes the YAML front matter into a new file.

    Note that if an existing file path is specified it will be
    overwritten.
    """
    f = open(file_path, 'w')
    front_matter = FRONT_MATTER.substitute({ 'title' : 'title: ' + title,
                                             'layout' : 'layout: ' + site.get('layout','none'),
                                             'categories' : ''
                                             })

    # Strip empty params from front matter
    for line in front_matter.splitlines(True):
        if not(EMPTY_LINE.match(line)):
            f.write(line)
    f.close()

def open_file(file):
    """Opens the file specified.

    The file is opened with the application specified in the 'editor'
    global variable in your jekyll config, or whatever app is in the
    value of the EDITOR environment variable.
    """
    editor = config.get('editor') or os.getenv('EDITOR')
    if editor:
        Popen(editor + ' ' + file, shell=True)
    return


def create_draft():
    """Creates a draft file for the current site.

    Creates the _drafts directory if it doesn't already exist. If the
    draft already exists, simply opens the draft in the editor. If the
    draft doesn't already exist, the file is created with the proper
    YAML Front Matter and then opened in the editor.

    The editor is determined by environment variable EDITOR, or in the
    value specified in the 'editor' option in the global .jekyll
    section.
    """
    drafts = get_site_subdir(DRAFTS, create=True)
    draft = os.path.join(drafts, create_file_name(options.draft, True))
    if not(os.path.exists(draft)):
        write_front_matter(draft, options.draft)

    open_file(draft)


def create_post():
    """Creates a post with the title given on the command line.

    The drafts are first searched to see if one matches the title and
    the user is prompted to publish that draft. If not draft matches,
    or the user declines the prompt, a new post is created. Then the
    post is opened in the editor.
    """
    drafts = get_site_subdir(DRAFTS)
    posts = get_site_subdir(POSTS, create=True)
    post = os.path.join(posts, create_file_name(options.post))

    selected_draft = None

    if (drafts):
        paths = glob.glob(os.path.join(drafts, "*" +
                                       re.sub('\s+', '*', options.post).lower() +
                                       '*'))
        if (len(paths) > 0):
            matches = '\n'.join([str(index + 1) + ": " + os.path.basename(path)
                       for index, path in enumerate(paths)])
            selection = raw_input(PROMPT.substitute(matches=matches))

            if selection:
                try:
                    index = int(selection)-1
                    if index < len(paths):
                        selected_draft = paths[index]
                except ValueError:
                    pass

    if selected_draft:
        # Move and rename it
        os.rename(selected_draft, post)
    else:
        # Create the file and write the YAML front matter
        write_front_matter(post, options.post)

    open_file(post)


config = get_config()

check_args()

site = get_site_config(options.site)

if options.draft:
    if site == None:
        exit("No site specified")
    create_draft()
    sys.exit()

if options.post:
    if site == None:
        exit("No site specified")
    create_post()
    sys.exit()
